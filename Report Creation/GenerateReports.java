import java.util.*;
import java.io.*;
import java.nio.file.*;

public class GenerateReports {

    /** number of text files to be read, generated by CompileAndExecuteScript.sh */
    public static final int READ_TEXT_FILES = 6;
    
    public static final CharSequence AUDIT_COMPLETE = "Audit done.";
    public static final CharSequence INDENT_LEVEL = "indent level";
    public static final CharSequence INDENT_LEVEL_TWO = "(If this isn't";
    public static final CharSequence DOING_STYLE = "** Doing style";
    public static final CharSequence STARTING_AUDIT = "Starting audit...";
    
    public static final int AFS_START_SUBSTRING_LENGTH = 28;
    
    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println("Usage: java GenerateReports directory_name");
            System.exit(1);
        }
        
        File folder = new File(args[0]);
        if ( !folder.isDirectory() ) {
            System.out.println("Error: supplied directory not a directory.");
            System.exit(1);
        }
        
        //Folders inside the directory
        File[] folders = folder.listFiles();
        
        //Files in each directory
        //[Number of folders][Number of text files to be read.]
        File[][] files = new File[folders.length][READ_TEXT_FILES];
        
        //Get files from each directory - the output.*.txt files specifically
        for ( int i = 0; i < folders.length; i++ ) {
            files[i] = folders[i].listFiles(new FilenameFilter(){
                @Override
	            public boolean accept(File directory, String fileName) {
                    return fileName.endsWith(".txt");
	            }
	        } );
        }
        
        PrintWriter writer = null;
        Scanner reader = null;
        
        for ( int i = 0; i < folders.length; i++ ) {
            // Setting up style file to be read.
            String styleFile = folders[i] + "/output_style.txt";
            File style = new File(styleFile);
            
            // Setting up report file to be written to.
            String reportFile = folders[i] + "/Report.txt";
            File report = new File(reportFile);
            
            // Making sure that report doesn't already exist.
            if ( report.exists() ) {
                report.delete();
            }
            
            // Making sure we have a style file to check
            if ( !style.exists() ) {
                System.out.println("No output for style in folder: " + folders[i]);
                continue; //Skip iteration, we couldn't find that style file.
            }
            
            // Making sure we can create that report file.
            try {
                report.createNewFile();
            } catch ( Exception e ) {
                System.out.println(e.getMessage());
                System.exit(1);
            }
            
            // Setting up our reader/writer combo.
            try {
                writer = new PrintWriter(report, "UTF-8");
                reader = new Scanner(style);
            } catch ( Exception e ) {
                System.out.println(e.getMessage());
                System.exit(1);
            }
            
            String javaFileName = "";
            int numTabLines = 0;
            
            while ( reader.hasNextLine() ) {
                String line = reader.nextLine();
                
                // If the audit is complete.
                if ( line.contains(AUDIT_COMPLETE) ) {
                    break;
                }
                
                if (line.contains(INDENT_LEVEL) || 
                    line.contains(INDENT_LEVEL_TWO) || 
                    line.contains(DOING_STYLE) || 
                    line.contains(STARTING_AUDIT) ||
                    line.equals("")) {
                    
                    continue;
                    
                }
                
                //Removing a few things:
                
                // /afs/unity.ncsu.edu/users/*/
                line = line.substring(AFS_START_SUBSTRING_LENGTH);
                
                // unityid/folders/.../StudentLastName_
                line = line.substring(line.indexOf("_") + 1);
                
                // StudentFirstName/
                line = line.substring(line.indexOf("/") + 1);
                //System.out.println(line);
                
                //Final output: Program.java:##: Style Error
                
                javaFileName = line.substring(0, line.indexOf("."));
                
                // Check if a tab character was detected.
                if (line.contains("tab")) {
                    numTabLines++;
                }
                
                //Testing
                //writer.println(line);
                //writer.flush();
                
            }
            
            //Broken
            writer.println("Lines with tab characters detected: " + numTabLines);
        
        }
    
    }

}
